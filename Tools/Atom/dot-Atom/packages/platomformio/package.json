{
  "_args": [
    [
      {
        "raw": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
        "spec": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
        "type": "local"
      },
      "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/apm-install-dir-11843-42002-axawkv.z0qyvf5hfr"
    ]
  ],
  "_from": "../d-11843-42002-wzuisf.937f340a4i/package.tgz",
  "_id": "platomformio@0.7.1",
  "_inCache": true,
  "_location": "/platomformio",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
    "spec": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11843-42002-wzuisf.937f340a4i/package.tgz",
  "_shasum": "9c9f90b80ad62e88fcdf0ffcee1532044c0a432f",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/d-11843-42002-wzuisf.937f340a4i/package.tgz",
  "_where": "/private/var/folders/yw/z380yj_56m7fr33srnxtszy40000gn/T/apm-install-dir-11843-42002-axawkv.z0qyvf5hfr",
  "activationCommands": {
    "atom-workspace": [
      "platomformio:build",
      "platomformio:upload",
      "platomformio:program",
      "platomformio:uploadfs",
      "platomformio:clean",
      "platomformio:close",
      "platomformio:kill"
    ]
  },
  "bugs": {
    "url": "https://github.com/vigetlabs/platomformio/issues"
  },
  "dependencies": {
    "ansi-to-html": ">0.1.0",
    "atom-space-pen-views": "^2.0.3"
  },
  "description": "Integration with PlatformIO an open source ecosystem for IoT development. Cross-platform code builder and library manager. Continuous and IDE integration. Arduino and MBED compatible. Ready for Cloud compiling.",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.0.0 <2.0.0"
  },
  "homepage": "https://github.com/vigetlabs/platomformio#readme",
  "keywords": [
    "PlatformIO",
    "IoT",
    "embedded",
    "cross",
    "arduino",
    "mbed",
    "cli",
    "builder",
    "library manager",
    "esp8266"
  ],
  "license": "MIT",
  "main": "./lib/platomformio",
  "name": "platomformio",
  "optionalDependencies": {},
  "readme": "# platomformio\n\nIntegration with [PlatformIO](http://platformio.org/) an open source ecosystem\nfor IoT development. Cross-platform code builder and library manager.\nContinuous and IDE integration. Arduino and MBED compatible.\nReady for Cloud compiling.\n\n*Atmel AVR & SAM, Espressif, Freescale Kinetis, Nordic nRF51, NXP LPC,\nSilicon Labs EFM32, ST STM32, TI MSP430 & Tiva, Teensy, Arduino, mbed,\nlibOpenCM3, ESP8266, etc.*\n\n## Setup\n1. Install [PlatformIO](http://platformio.org/)\n2. Set the `Environment PATH` package setting with the result of `echo $PATH` (Unix) / `echo %PATH%` (Windows).\n2. Create a PlatformIO project using [platformio init](http://docs.platformio.org/en/latest/userguide/cmd_init.html) command:\n  - Create empty directory for the new project (Unix `mkdir my-project; cd my-project`)\n  - `platformio init --board=TYPE`, where `TYPE` can be found in [Embedded Boards Explorer](http://platformio.org/#!/boards)\n3. Place your source files to `src` directory\n4. Open any file from `src` directory and then Build/Upload.\n\n\n**Note!** If you have an error `Program \"platformio\" not found in PATH`,\nplease specify \"Environment PATH to run `platformio`\" in settings.\n\n## Build\n\nVerify your code can compile with `cmd-shift-B`:\n\n![build](http://i.imgur.com/6h1OSt7.gif)\n\n## Upload\n\nPlug your board in and `cmd-shift-U`:\n\n![upload](http://i.imgur.com/sYk6qAO.gif)\n\n## Upload using Programmer\n\nPlug your board in and `cmd-shift-P`. Please make sure to read\n[Upload using Programmer for Atmel AVR](http://docs.platformio.org/en/latest/platforms/atmelavr.html#upload-using-programmer)\nfirst.\n\n## Upload SPIFFS firmware\n\nPlug your board in and `cmd-shift-F`. Please make sure to read\n[Uploading files to file system SPIFFS for ESP8266](http://docs.platformio.org/en/latest/platforms/espressif.html#uploading-files-to-file-system-spiffs)\nfirst.\n\n\n## Kill Process\n\nYou can kill a process anytime with `cmd-shift-k`\n\n## Settings\n\n- **Environment PATH to run `platformio`:** Defaults to `PATH` from current\n  Atom session. Paste here result of\n  `echo $PATH` (Unix) / `echo %PATH%` (Windows) command by typing into your terminal.\n\n- **Verbose Builds:** Default behavior is to only show build output if there is\n  an error. Check this if you want to see all build output.\n\n- **Verbose Uploads:** Default behavior is to show all upload output. Uncheck\n  this if you only want to see output if there is an error.\n\n### Contributors\n\n- [efatsi](https://github.com/efatsi)\n- [ivankravets](https://github.com/ivankravets)\n- [RomFouq](https://github.com/RomFouq)\n\n### Acknowledgements\n\n*This package has [atom-script](https://github.com/rgbkrk/atom-script) to thank\nfor it's good looks*\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vigetlabs/platomformio.git"
  },
  "version": "0.7.1"
}
